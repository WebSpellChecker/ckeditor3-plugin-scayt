/*
Copyright (c) 2003-2011, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.html or http://ckeditor.com/license
*/

/**
 * @fileOverview Spell Check As You Type (SCAYT).
 * Button name : Scayt.
 */

(function()
{
	var commandName  = 'scaytcheck',
		openPage = '';

	// Checks if a value exists in an array
	function in_array( needle, haystack )
	{
		var found = 0,
			key;
		for ( key in haystack )
		{
			if ( haystack[ key ] == needle )
			{
				found = 1;
				break;
			}
		}
		return found;
	}
	
	document.getElementsByClassName = function(cl) {
		var retnode = [];
		var myclass = new RegExp('\\b'+cl+'\\b');
		var elem = this.getElementsByTagName('*');
		for (var i = 0; i < elem.length; i++) {
		var classes = elem[i].className;
		if (myclass.test(classes)) retnode.push(elem[i]);
		}
		return retnode;
	}; 
 
CKEDITOR.plugins.scayt =
	{
		engineLoaded : false,
		editor: '',
		instances : {},
		// Data storage for SCAYT control, based on editor instances
		controlInfo : {},
		setControlInfo : function( editor, o )
		{
			if ( editor && editor.name && typeof ( this.controlInfo[ editor.name ] ) != 'object' )
				this.controlInfo[ editor.name ] = {};

			for ( var infoOpt in o )
				this.controlInfo[ editor.name ][ infoOpt ] = o[ infoOpt ];
		},
		isControlRestored : function( editor )
		{
			if ( editor &&
					editor.name &&
					this.controlInfo[ editor.name ] )
			{
				return this.controlInfo[ editor.name ].restored ;
			}
			return false;
		},
		markControlRestore : function( editor )
		{
			this.setControlInfo( editor, { restored:true } );
		},
		setControlId: function( editor, id )
		{
			this.setControlInfo( editor, { id:id } );
		},
		getControlId: function( editor )
		{
			if ( editor &&
					editor.name &&
					this.controlInfo[ editor.name ] &&
					this.controlInfo[ editor.name ].id )
			{
				return this.controlInfo[ editor.name ].id;
			}
			return null;
		},
		setPaused: function( editor , bool )
		{
			this.setControlInfo( editor, { paused:bool } );
		},
		isPaused: function( editor )
		{
			if ( editor &&
					editor.name &&
					this.controlInfo[editor.name] )
			{
				return this.controlInfo[editor.name].paused;
			}
			return undefined;
		},
		getScayt : function( editor )
		{
			return this.instances[ editor.name ];
		},
		isScaytReady : function( editor )
		{
			return this.engineLoaded === true &&
				'undefined' !== typeof window.scayt && this.getScayt( editor );
		},
		isScaytEnabled : function( editor )
		{
			var scayt_instance = this.getScayt( editor );
			return ( scayt_instance ) ? scayt_instance.disabled === false : false; 
		},
		getUiTabs : function( editor )
		{
			var uiTabs = [];

			// read UI tabs value from config
			var configUiTabs = editor.config.scayt_uiTabs || "1,1,1";

			// convert string to array
			configUiTabs = configUiTabs.split( ',' );

			// "About us" should be always shown for standard config
			configUiTabs[3] = "1";

			for ( var i = 0; i < 4; i++ ) {
				uiTabs[i] = (typeof window.scayt != "undefined" && typeof window.scayt.uiTags != "undefined")
								? (parseInt(configUiTabs[i],10) && window.scayt.uiTags[i])
								: parseInt(configUiTabs[i],10);
			}
			return uiTabs;
		},
		
		createInstance: function()
		{
		 
						 
						var editor = this;

						var config = editor.config;
						// Initialise Scayt instance.
						var oParams = {};
						// Get the iframe. 
						 
						oParams.srcNodeRef = editor.document.getWindow().$.frameElement;
						 
						// syntax : AppName.AppVersion@AppRevision
						oParams.assocApp  = 'CKEDITOR.' + CKEDITOR.version + '@' + CKEDITOR.revision;
						 
						oParams.customerid = config.scayt_customerid  || '1:WvF0D4-UtPqN1-43nkD4-NKvUm2-daQqk3-LmNiI-z7Ysb4-mwry24-T8YrS3-Q2tpq2';
						 
						oParams.customDictionaryIds = config.scayt_customDictionaryIds || '';
						 
						oParams.userDictionaryName = config.scayt_userDictionaryName || '';
						 
						oParams.sLang = config.scayt_sLang || 'en_US';
						 
						// Introduce SCAYT onLoad callback. (#5632)
						oParams.onLoad = function()
							{
								 
								// Draw down word marker to avoid being covered by background-color style.(#5466)
								if ( !( CKEDITOR.env.ie && CKEDITOR.env.version < 8 ) )
									this.addStyle( this.selectorCss(), 'padding-bottom: 2px !important;' );

								// Call scayt_control.focus when SCAYT loaded
								// and only if editor has focus and scayt control creates at first time (#5720)
								if ( editor.focusManager.hasFocus && !plugin.isControlRestored( editor ) )
									this.focus();

							};
						
						 
						
						oParams.onBeforeChange = function()
						{
						 
		 
							 
							if ( plugin.getScayt( editor ) && !editor.checkDirty() )
								setTimeout( function(){ editor.resetDirty(); }, 0 );
						};
						
						 
						
						var scayt_custom_params = window.scayt_custom_params;
						if ( typeof scayt_custom_params == 'object' )
						{
							for ( var k in scayt_custom_params )
								oParams[ k ] = scayt_custom_params[ k ];
						}
						
						
						
						// needs for restoring a specific scayt control settings
						if ( plugin.getControlId( editor ) )
							oParams.id = plugin.getControlId( editor );
						
						
						 
						
						
						
						
 					  setTimeout(function(){ 
					   
					   if(typeof window.scayt == "function"){
					    
						var scayt_control = new window.scayt(oParams);
						 
						scayt_control.afterMarkupRemove.push( function( node )
						{
							( new CKEDITOR.dom.element( node, scayt_control.document ) ).mergeSiblings();
						} );

						// Copy config.
						var lastInstance = plugin.instances[ editor.name ];
						if ( lastInstance )
						{
							scayt_control.sLang = lastInstance.sLang;
							scayt_control.option( lastInstance.option() );
							scayt_control.paused = lastInstance.paused;
						}
						 
						plugin.instances[ editor.name ] = scayt_control;

						 
							scayt_control.setDisabled( plugin.isPaused( editor ) === false );
						 
						
						 
						
				 

						editor.fire( 'showScaytState' );
						
						}
					   
					   }, 100) 
						
		},
		
		onEngineLoad : function(editor)
		{
		  
		   
		 
		 
		editor = this;
		
		editor.on( 'contentDom', plugin.createInstance );
		editor.on( 'contentDomUnload', function()
			{
				// Remove scripts.
				var scripts = CKEDITOR.document.getElementsByTag( 'script' ),
					scaytIdRegex =  /^dojoIoScript(\d+)$/i,
					scaytSrcRegex =  /^https?:\/\/svc\.webspellchecker\.net\/spellcheck\/script\/ssrv\.cgi/i;

				for ( var i=0; i < scripts.count(); i++ )
				{
					var script = scripts.getItem( i ),
						id = script.getId(),
						src = script.getAttribute( 'src' );

					if ( id && src && id.match( scaytIdRegex ) && src.match( scaytSrcRegex ))
						script.remove();
				}
			});


		editor.on( 'destroy', function( ev )
			{
				var editor = ev.editor,


					scayt_instance = plugin.getScayt( editor );



				// SCAYT instance might already get destroyed by mode switch (#5744).

				if ( !scayt_instance )
					return;


				delete plugin.instances[ editor.name ];
				// store a control id for restore a specific scayt control settings


				plugin.setControlId( editor, scayt_instance.id );
				scayt_instance.destroy( true );




			});
		
		
	 
		// Listen to data manipulation to reflect scayt markup.
	
		 

		 
		editor.on( 'dialogShow', function( ev )
			{
				 
				var editor = ev.editor;
				if ( plugin.isScaytEnabled( editor ) ) {
					
						var instance = plugin.getScayt( editor );
						instance.setPaused(true);
				}
			});
		
		editor.on( 'dialogHide', function( ev )
			{
				 
				var editor = ev.editor;
				if ( plugin.isScaytEnabled( editor ) ) {
					window.setTimeout( function()
						{
							var instance = plugin.getScayt( editor );
				
							instance.setPaused(false);
							instance && instance.refresh();
						}, 1 );
				}
			});
		

		var dataProcessor = editor.dataProcessor,
			htmlFilter = dataProcessor && dataProcessor.htmlFilter;

		if ( htmlFilter )
		{
			htmlFilter.addRules(
				{
					elements :
					{
						span : function( element )
						{
							if ( element.attributes[ 'data-scayt_word' ]
									&& element.attributes[ 'data-scaytid' ] )
							{
								delete element.name;	// Write children, but don't write this node.
								return element;
							}
						}
					},
					attributes :
					{
						'class' : function( value, element )
						{
							return value.replace( /(scayt-enabled)|(scayt-disabled)/, '' ) || false;
						}
					}
				}
			);
		}

		// Override Image.equals method avoid CK snapshot module to add SCAYT markup to snapshots. (#5546)
		var undoImagePrototype = CKEDITOR.plugins.undo.Image.prototype;
		undoImagePrototype.equals = CKEDITOR.tools.override( undoImagePrototype.equals, function( org )
		{
			return function( otherImage )
			{
				var thisContents = this.contents,
					otherContents = otherImage.contents;
				var scayt_instance = plugin.getScayt( this.editor );
				// Making the comparison based on content without SCAYT word markers.
				if ( scayt_instance && plugin.isScaytReady( this.editor ) )
				{
					// scayt::reset might return value undefined. (#5742)
					this.contents = scayt_instance.reset( thisContents ) || '';
					otherImage.contents = scayt_instance.reset( otherContents ) || '';
				}

				var retval = org.apply( this, arguments );

				this.contents = thisContents;
				otherImage.contents = otherContents;
				return retval;
			};
		});

		 if ( editor.document ){
			   
			 plugin.createInstance.apply(editor);
			 }
		return true;
		},
		
		
		loadEngine : function( editor )
		{
			 
			 
			 
		 
			// SCAYT doesn't work with Firefox2, Opera and AIR.
			if ( CKEDITOR.env.gecko && CKEDITOR.env.version < 10900 || CKEDITOR.env.opera || CKEDITOR.env.air )
				return editor.fire( 'showScaytState' );
		 
			if ( this.engineLoaded === true ){
				 
				return this.onEngineLoad.apply(editor);
				//return this.onEngineLoad.apply( editor );	
				}
				 // Add new instance.
			else if ( this.engineLoaded == -1 )	{		// We are waiting.

				 
				 
				//return CKEDITOR.on( 'scaytReady',  plugin.onEngineLoad.apply(editor) );	// Use function(){} to avoid rejection as duplicate.
					
				}
             
			 	
			
			 
				// Loading in progress.

			// compose scayt url
			var protocol = document.location.protocol;
			// Default to 'http' for unknown.
			protocol = protocol.search( /https?:/) != -1? protocol : 'http:';
			var baseUrl  = 'svc.webspellchecker.net/scayt26/loader__base.js';

			var scaytUrl  =  editor.config.scayt_srcUrl || ( protocol + '//' + baseUrl );
			var scaytConfigBaseUrl =  plugin.parseUrl( scaytUrl ).path +  '/';

			if( window.scayt == undefined && this.engineLoaded != -1)
			{
				  
				 this.engineLoaded = -1;
				CKEDITOR._djScaytConfig =
				{
					baseUrl: scaytConfigBaseUrl,
					addOnLoad:
					[
						function()
						{
							CKEDITOR.fireOnce( 'scaytReady' );
						}
					],
					isDebug: false
				};
				// Append javascript code.
				 
				CKEDITOR.document.getHead().append(
					CKEDITOR.document.createElement( 'script',
						{
							attributes :
								{
									type : 'text/javascript',
									async : 'true',
									src : scaytUrl
								}
						})
				);
				//this.engineLoaded = true;
				 
			}
			else
				CKEDITOR.fireOnce( 'scaytReady' );
		 
		 
			//CKEDITOR.on( 'scaytReady',  this.onEngineLoad.apply(editor));
			CKEDITOR.on( 'scaytReady', function()
			 	{
					  
					this.engineLoaded = true;
					
					for(var oi in CKEDITOR.instances)
					{

						if(CKEDITOR.instances[oi].config.scayt_autoStartup && !CKEDITOR.plugins.scayt.instances[oi])
							this.onEngineLoad.apply(CKEDITOR.instances[oi]);
					}
					
					
				},
				this,
				null,
				0
		 	);	// First to run. */
			return null;
		},
		parseUrl : function ( data )
		{
			var match;
			if ( data.match && ( match = data.match(/(.*)[\/\\](.*?\.\w+)$/) ) )
				return { path: match[1], file: match[2] };
			else
				return data;
		}
	};

	var plugin = CKEDITOR.plugins.scayt;

	// Context menu constructing.
	var addButtonCommand = function( editor, buttonName, buttonLabel, commandName, command, menugroup, menuOrder )
	{
		editor.addCommand( commandName, command );

		// If the "menu" plugin is loaded, register the menu item.
		editor.addMenuItem( commandName,
			{
				label : buttonLabel,
				command : commandName,
				group : menugroup,
				order : menuOrder
			});
	};

	var commandDefinition =
	{
		preserveState : true,
		editorFocus : false,
		canUndo : false,

		exec: function( editor )
		{
			if ( plugin.isScaytReady( editor ) )
			{
				var isEnabled = plugin.isScaytEnabled( editor );

				this.setState( isEnabled ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_ON );

				var scayt_control = plugin.getScayt( editor );
				// the place where the status of editor focus should be restored
				// after there will be ability to store its state before SCAYT button click
				// if (storedFocusState is focused )
				//   scayt_control.focus();
				//
				// now focus is set certainly
				scayt_control.focus();
				scayt_control.setDisabled( isEnabled );
			}
			else if ( !editor.config.scayt_autoStartup && plugin.engineLoaded >= 0 )	// Load first time
			{
				this.setState( CKEDITOR.TRISTATE_DISABLED );
				
				 editor.config.scayt_autoStartup = true;
				plugin.loadEngine( editor );
			}
		}
	};

	// Add scayt plugin.
	CKEDITOR.plugins.add( 'scayt',
	{
		requires : [ 'menubutton' ],

		beforeInit : function( editor )
		{
			var items_order = editor.config.scayt_contextMenuItemsOrder
					|| 'suggest|moresuggest|control',
				items_order_str = "";

			items_order = items_order.split( '|' );

			if ( items_order && items_order.length )
			{
				for ( var pos = 0 ; pos < items_order.length ; pos++ )
					items_order_str += 'scayt_' + items_order[ pos ] + ( items_order.length != parseInt( pos, 10 ) + 1 ? ',' : '' );
			}

			// Put it on top of all context menu items (#5717)
			editor.config.menu_groups =  items_order_str + ',' + editor.config.menu_groups;
		},

		init : function( editor )
		{
			 
			//alert("init");
			var dataFilter = editor.dataProcessor && editor.dataProcessor.dataFilter;
			var dataFilterRules =
			{
					elements :
					{
							span : function( element )
							{
									var attrs = element.attributes;
									if ( attrs && attrs[ 'data-scaytid' ] )
											delete element.name;
							}
					}
			};
			dataFilter && dataFilter.addRules( dataFilterRules );

			var moreSuggestions = {},
				mainSuggestions = {};

			// Scayt command.
			var command = editor.addCommand( commandName, commandDefinition );

			// Add Options dialog.
			CKEDITOR.dialog.add( commandName, CKEDITOR.getUrl( this.path + 'dialogs/options.js' ) );
			 
			var uiTabs = plugin.getUiTabs( editor );

			var menuGroup = 'scaytButton';
			editor.addMenuGroup( menuGroup );
			// combine menu items to render
			var uiMenuItems = {};

			var lang = editor.lang.scayt;

			// always added
			uiMenuItems.scaytToggle =
				{
					label : lang.enable,
					command : commandName,
					group : menuGroup
				};

			if ( uiTabs[0] == 1 )
				uiMenuItems.scaytOptions =
				{
					label : lang.options,
					group : menuGroup,
					onClick : function()
					{
						openPage = 'options';
						editor.openDialog( commandName );
					}
				};

			if ( uiTabs[1] == 1 )
				uiMenuItems.scaytLangs =
				{
					label : lang.langs,
					group : menuGroup,
					onClick : function()
					{
						openPage = 'langs';
						editor.openDialog( commandName );
					}
				};
			if ( uiTabs[2] == 1 )
				uiMenuItems.scaytDict =
				{
					label : lang.dictionariesTab,
					group : menuGroup,
					onClick : function()
					{
						openPage = 'dictionaries';
						editor.openDialog( commandName );
					}
				};
			// always added
			uiMenuItems.scaytAbout =
				{
					label : editor.lang.scayt.about,
					group : menuGroup,
					onClick : function()
					{
						openPage = 'about';
						editor.openDialog( commandName );
					}
				};

			editor.addMenuItems( uiMenuItems );

				editor.ui.add( 'Scayt', CKEDITOR.UI_MENUBUTTON,
					{
						label : lang.title,
						title : "Spell Check As You Type",
						className : 'cke_button_scayt',
						modes : { wysiwyg : 1 },
						onRender: function()
						{
							command.on( 'state', function()
							{
								this.setState( command.state );
							},
							this);
						},
						onMenu : function()
						{
							 
							var isEnabled = plugin.isScaytEnabled( editor );

							editor.getMenuItem( 'scaytToggle' ).label = lang[ isEnabled ? 'disable' : 'enable' ];

							var uiTabs = plugin.getUiTabs( editor );

							return {
								scaytToggle  : CKEDITOR.TRISTATE_OFF,
								scaytOptions : isEnabled && uiTabs[0] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
								scaytLangs   : isEnabled && uiTabs[1] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
								scaytDict    : isEnabled && uiTabs[2] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED,
								scaytAbout   : isEnabled && uiTabs[3] ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED
							};
						}
					});

			// If the "contextmenu" plugin is loaded, register the listeners.
			if ( editor.contextMenu && editor.addMenuItems )
			{
				editor.contextMenu.addListener( function( element, selection )
					{
					
						 console.log(editor.contextMenu);
						  
						if ( !plugin.isScaytEnabled( editor )
								|| ( selection.getRanges().length && selection.getCommonAncestor().isReadOnly() ) )
							return null;

						var scayt_control = plugin.getScayt( editor ),
							node = CKEDITOR.env.mac || CKEDITOR.env.opera ? scayt_control.getScaytNode(editor.contextMenu._.target.$) : scayt_control.getScaytNode();

						if ( !node )
							return null;

							var word = scayt_control.getWord( node );

						if ( !word )
							return null;

						var sLang = scayt_control.getLang(),
							items_suggestion = window.scayt.getSuggestion( word, sLang );
						// Remove unused commands and menuitems
						for ( var i in moreSuggestions )
						{
							delete editor._.menuItems[ i ];
							delete editor._.commands[ i ];
						}
						for ( var i in mainSuggestions )
						{
							delete editor._.menuItems[ i ];
							delete editor._.commands[ i ];
						}
						moreSuggestions = {};		// Reset items.
						mainSuggestions = {};

						var moreSuggestionsUnable = editor.config.scayt_moreSuggestions || 'on';
						var moreSuggestionsUnableAdded = false;

						var maxSuggestions = editor.config.scayt_maxSuggestions;
						( typeof maxSuggestions != 'number' ) && ( maxSuggestions = 5 );
						!maxSuggestions && ( maxSuggestions = items_suggestion.length );

						var contextCommands = editor.config.scayt_contextCommands || 'all';
						contextCommands = contextCommands.split( '|' );

						if ( items_suggestion && items_suggestion.length ) {
							for ( var i = 0, l = items_suggestion.length; i < l; i += 1 )
							{
								var commandName = 'scayt_suggestion_' + items_suggestion[i].replace( ' ', '_' );
								var exec = ( function( el, s )
									{
										return {
											exec: function()
											{
												scayt_control.replace(el, s);
											}
										};
									})( node, items_suggestion[i] );

								if ( i < maxSuggestions )
								{
									addButtonCommand( editor, 'button_' + commandName, items_suggestion[i],
										commandName, exec, 'scayt_suggest', i + 1 );
									mainSuggestions[ commandName ] = CKEDITOR.TRISTATE_OFF;
								}
								else if ( moreSuggestionsUnable == 'on' )
								{
									addButtonCommand( editor, 'button_' + commandName, items_suggestion[i],
										commandName, exec, 'scayt_moresuggest', i + 1 );
									moreSuggestions[ commandName ] = CKEDITOR.TRISTATE_OFF;
									moreSuggestionsUnableAdded = true;
								}
							}

							if ( moreSuggestionsUnableAdded )
							{
								// Register the More suggestions group;
								editor.addMenuItem( 'scayt_moresuggest',
								{
									label : editor.lang.scayt.moreSuggestions,
									group : 'scayt_moresuggest',
									order : 10,
									getItems : function()
									{
										return moreSuggestions;
									}
								});
								mainSuggestions[ 'scayt_moresuggest' ] = CKEDITOR.TRISTATE_OFF;
							}
						}
						else {
							// "No suggestions" feature
							editor.addMenuItem( 'scayt_nosuggest',
							{
								label : editor.lang.scayt.noSuggestions ? editor.lang.scayt.noSuggestions : (editor.lang.spellCheck.noSuggestions ? editor.lang.spellCheck.noSuggestions : 'No suggestions'),
								group : 'scayt_suggest',
								order : 1
							});
							mainSuggestions[ 'scayt_nosuggest' ] = CKEDITOR.TRISTATE_OFF;
						}
						
						if ( in_array( 'all', contextCommands )  || in_array( 'ignore', contextCommands)  )
						{
							var ignore_command = {
								exec: function(){
									scayt_control.ignore( node );
								}
							};
							addButtonCommand( editor, 'ignore', lang.ignore, 'scayt_ignore', ignore_command, 'scayt_control', 1 );
							mainSuggestions[ 'scayt_ignore' ] = CKEDITOR.TRISTATE_OFF;
						}

						if ( in_array( 'all', contextCommands )  || in_array( 'ignoreall', contextCommands ) )
						{
							var ignore_all_command = {
								exec: function(){
									scayt_control.ignoreAll( node );
								}
							};
							addButtonCommand(editor, 'ignore_all', lang.ignoreAll, 'scayt_ignore_all', ignore_all_command, 'scayt_control', 2);
							mainSuggestions['scayt_ignore_all'] = CKEDITOR.TRISTATE_OFF;
						}

						if ( in_array( 'all', contextCommands )  || in_array( 'add', contextCommands ) )
						{
							var addword_command = {
								exec: function(){
									window.scayt.addWordToUserDictionary( node );
								}
							};
							addButtonCommand(editor, 'add_word', lang.addWord, 'scayt_add_word', addword_command, 'scayt_control', 3);
							mainSuggestions['scayt_add_word'] = CKEDITOR.TRISTATE_OFF;
						}

						if ( scayt_control.fireOnContextMenu ){
							scayt_control.fireOnContextMenu( editor );
								  
							}
						 
						return mainSuggestions;
						 
					});
			}

			var showInitialState = function()
				{
					editor.removeListener( 'showScaytState', showInitialState );

					if ( !CKEDITOR.env.opera && !CKEDITOR.env.air )
						command.setState( plugin.isScaytEnabled( editor ) ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF );
					else
						command.setState( CKEDITOR.TRISTATE_DISABLED );
				};

			editor.on( 'showScaytState', showInitialState );

			if ( CKEDITOR.env.opera || CKEDITOR.env.air )
			{
				editor.on( 'instanceReady', function()
				{
					showInitialState();
				});
			}

			// Start plugin
			if ( editor.config.scayt_autoStartup )
			{
				
				editor.on( 'instanceReady', function()
				{
					plugin.loadEngine( editor );
				});
			}
			
				// Delete span[data-scaytid] when text pasting in editor (#6921)
			
			 
				editor.on( 'afterSetData', function()
			{
				 
				 
				 if ( plugin.isScaytEnabled( editor ) ) {
					window.setTimeout( function()
						{
							var instance = plugin.getScayt( editor );
							
							instance && instance.refresh();
						}, 10 );
				} 
			});
			
 
			
			editor.on( 'beforeCommandExec', function( ev )		// Disable SCAYT before Source command execution.
			{
 
				if ( ( ev.data.name == 'source' || ev.data.name == 'newpage' || ev.data.name == 'checkspell' || ev.data.name =='templates' ) && editor.mode == 'wysiwyg' )
				{
					var scayt_instance = plugin.getScayt( editor );
					if ( scayt_instance )
					{
						plugin.setPaused( editor, !scayt_instance.disabled );
						// store a control id for restore a specific scayt control settings
						plugin.setControlId( editor, scayt_instance.id );
						scayt_instance.destroy( true );
						delete plugin.instances[ editor.name ];
						 
					}
				}
				// Catch on source mode switch off (#5720)
				else if ( ev.data.name == 'source'  && editor.mode == 'source' ){
					 
					plugin.markControlRestore( editor );
					 
					}
			});

 
			
		editor.on( 'afterCommandExec', function( ev )
			{
				  
				if ( !plugin.isScaytEnabled( editor ) )
					return;

				if ( editor.mode == 'wysiwyg' && ( ev.data.name == 'undo' || ev.data.name == 'redo' ) ){
					  
					window.setTimeout( function() { plugin.getScayt( editor ).refresh(); }, 10 );
					
					}
			});

		editor.on( 'destroy', function( ev )
			{
				 
				var editor = ev.editor,
					scayt_instance = plugin.getScayt( editor );

				// SCAYT instance might already get destroyed by mode switch (#5744).
				if ( !scayt_instance )
					return;

				delete plugin.instances[ editor.name ];
				// store a control id for restore a specific scayt control settings
				plugin.setControlId( editor, scayt_instance.id );
				scayt_instance.destroy( true );
			});

		// Listen to data manipulation to reflect scayt markup.
		editor.on( 'afterSetData', function()
			{
				if ( plugin.isScaytEnabled( editor ) ) {
					window.setTimeout( function()
						{
							var instance = plugin.getScayt( editor );
							instance && instance.refresh();
						}, 10 );
				}
			});
		// Reload spell-checking for current word after insertion completed.
		editor.on( 'insertElement', function()
			{
				var scayt_instance = plugin.getScayt( editor );
				if ( plugin.isScaytEnabled( editor ) )
				{
					// Unlock the selection before reload, SCAYT will take
					// care selection update.
					if ( CKEDITOR.env.ie )
						editor.getSelection().unlock( true );

					// Return focus to the editor and refresh SCAYT markup (#5573).
					window.setTimeout( function()
					{
						scayt_instance.focus();
						scayt_instance.refresh();
					}, 10 );
				}
			}, this, null, 50 );

		editor.on( 'insertHtml', function()
			{
				var scayt_instance = plugin.getScayt( editor );
				if ( plugin.isScaytEnabled( editor ) )
				{
					// Unlock the selection before reload, SCAYT will take
					// care selection update.
					if ( CKEDITOR.env.ie )
						editor.getSelection().unlock( true );

					// Return focus to the editor (#5573)
					// Refresh SCAYT markup
					window.setTimeout( function()
					{
						scayt_instance.focus();
						scayt_instance.refresh();
					}, 10 );
				}
			}, this, null, 50 );

		editor.on( 'scaytDialog', function( ev )	// Communication with dialog.
			{
				ev.data.djConfig = window.djConfig;
				ev.data.scayt_control = plugin.getScayt( editor );
				ev.data.tab = openPage;
				ev.data.scayt = window.scayt;
			});	
		},

		afterInit : function( editor )
		{
			// Prevent word marker line from displaying in elements path and been removed when cleaning format. (#3570) (#4125)
			var elementsPathFilters,
					scaytFilter = function( element )
					{
						if ( element.hasAttribute( 'data-scaytid' ) )
							return false;
					};

			if ( editor._.elementsPath && ( elementsPathFilters = editor._.elementsPath.filters ) )
				elementsPathFilters.push( scaytFilter );

			editor.addRemoveFormatFilter && editor.addRemoveFormatFilter( scaytFilter );

		}
	});
})();
